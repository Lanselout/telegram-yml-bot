from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime

from parser.yml_to_meta import parse_yml_to_meta
from sheets.google_sheets import write_to_sheet
from utils.logger import logger

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
env_path = Path(__file__).resolve().parent.parent / ".env"
print(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏–∑: {env_path}")
print(f"üì¶ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? {env_path.exists()}")

load_dotenv(dotenv_path=env_path)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
print(f"üîë TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω? {'–î–∞' if BOT_TOKEN else '–ù–ï–¢'}")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")

# === Telegram –ª–æ–≥–∏–∫–∞ ===
UPLOAD = range(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å YML –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Meta-—Ç–∞–±–ª–∏—Ü—É.", reply_markup=markup)

async def prompt_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∂–∏–¥–∞—é —Ñ–∞–π–ª XML...")
    return UPLOAD

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• handle_file –∑–∞–ø—É—â–µ–Ω")
    await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    try:
        document = update.message.document
        file = await document.get_file()
        filename = os.path.join("data", document.file_name)
        print(f"üìÑ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª –∫–∞–∫: {filename}")
        await file.download_to_drive(custom_path=filename)

        items = parse_yml_to_meta(filename)
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")

        write_to_sheet(items)

        in_stock = sum(1 for item in items if item["availability"] == "in stock")
        out_stock = sum(1 for item in items if item["availability"] == "out of stock")
        now = datetime.now().strftime("%d.%m.%Y %H:%M")

        await update.message.reply_text(
            f"‚úÖ –§–∏–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –≤—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {now}\n"
            f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}\n"
            f"‚úÖ –í –Ω–∞–ª–∏—á–∏–∏: {in_stock}  ‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {out_stock}"
        )

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:", e)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

    return ConversationHandler.END




def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"), prompt_upload)],
        states={UPLOAD: [MessageHandler(filters.Document.ALL, handle_file)
]},
        fallbacks=[],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
